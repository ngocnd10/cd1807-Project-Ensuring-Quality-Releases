name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
# pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  azureServiceConnectionId2: 'myServiceConnection2'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'ngocnd7-p3-storage-rg'
        backendAzureRmStorageAccountName: 'tfstate13520554'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure
    # ToDo: Change the workingDirectory path, as applicable to you
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: 'fakerestapi.zip'
    # FakeRestAPI - Publish    
    - publish: 'fakerestapi.zip'
      displayName: 'Upload FakeRestAPI'
      artifact: drop-fakerestapi
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.BuildId)-selenium.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.BuildId)-selenium.zip
      displayName: 'Upload Selenium'
      artifact: drop-selenium

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-20.04'      
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId2)'
              appName: 'ngocnd7-p3-app-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi.zip
              deploymentMethod: 'auto'
- stage: Test
  jobs:
  - job: Test_Jmeter
    displayName: PerformanceTesting
    pool:
      vmImage: 'Ubuntu-20.04'
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java -version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        apache-jmeter-5.5/bin/jmeter --version
        mkdir -p log/jmeter
        pwd
        ls -la
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/StressTest.jmx \
                                      -l log/jmeter/stress-test-result.csv \
                                      -e -f -o log/jmeter/stress-test-html-report \
                                      -j log/jmeter/jmeter-stress-test.log
        cat log/jmeter/jmeter-stress-test.log
      displayName: JMeter stress test
    - bash: |
        apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/EnduranceTest.jmx \
                                      -l log/jmeter/endurance-test-result.csv \
                                      -e -f -o log/jmeter/endurance-test-html-report \
                                      -j log/jmeter/jmeter-endurance-test.log
        cat log/jmeter/jmeter-endurance-test.log                     
      displayName: JMeter endurance test
    - task: ArchiveFiles@2
      displayName: Publish JMeter stress test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report.zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Publish JMeter endurance test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report.zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'drop-jmeter'          
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: 'test'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: inline
                script: |
                  #!/bin/bash
                  chromium-browser -version
                  chromedriver --version
                  cd $(Pipeline.Workspace)/drop-selenium
                  unzip -o $(Build.BuildId)-selenium.zip
                  sudo mkdir -p /var/log/selenium
                  sudo chmod 664 /var/log/selenium
                  python3 login.py > ui-logs.log
                  python3 login.py
                  sudo mv ui-logs.log /var/log/selenium
                  cd $(System.DefaultWorkingDirectory)
                  mkdir -p log/selenium
                  sudo cp /var/log/selenium/ui-logs.log log/selenium
            - task: PublishPipelineArtifact@1
              displayName: Publish selenium logs
              inputs:
                targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                artifactName: 'drop-selenium-logs'
  - job: PostmanTests
    displayName: Postman Tests
    steps: 
    - task: NodeTool@0
      displayName: Install Node v14.X
      inputs:
        versionSpec: '14.x'
        checkLatest: true
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Regression Tests
      inputs:
        script: |
          pwd
          ls automatedtesting/postman
          newman run automatedtesting/postman/Regression_Test_Suite.postman_collection.json -e automatedtesting/postman/Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml --suppress-exit-code
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      inputs:
        script: |
          pwd
          ls automatedtesting/postman
          newman run automatedtesting/postman/Data_Validation_Test_Suite.postman_collection.json -e automatedtesting/postman/Data_Validation_Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml --suppress-exit-code
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      inputs:
        script: 'ls -la ./Results/'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Test Reports
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'